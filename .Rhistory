else x <- tfit
col <- if(missing(col)) rep(1:(s-1), rep(g,(s-1))) else col
lty <- if(missing(lty)) rep(1:g, s-1) else lty
lwd <- if(missing(lwd)) rep(1, g*(s-1)) else lwd
matplot(time, base::t(x$est), type="s", ylim = c(0,1),
xlab = xlab, ylab = ylab, xaxs="i", yaxs="i",
col = col, lty = lty, lwd = lwd)
legend("topleft", legend =  rownames(x$est), x.intersp = 2,
bty = "n", xjust = 1, col = col, lty = lty, lwd = lwd)
out <- list(test = tests, est = tfit$est, se = sqrt(tfit$var))
}
else
{ if(level < 0 | level > 1)
error("level must be a value in the range [0,1]")
# compute pointwise confidence intervals
oldpar <- par(ask=TRUE)
on.exit(par(oldpar))
if(missing(t))
{ time <- sort(unique(c(ftime, time)))
x <- timepoints(fit, time) }
else x <- tfit
z <- qnorm(1-(1-level)/2)
lower <- x$est ^ exp(-z*sqrt(x$var)/(x$est*log(x$est)))
upper <- x$est ^ exp(z*sqrt(x$var)/(x$est*log(x$est)))
col <- if(missing(col)) rep(1:(s-1), rep(g,(s-1)))
else             rep(col, g*(s-1))
lwd <- if(missing(lwd)) rep(1, g*(s-1))
else             rep(lwd, g*(s-1))
# plot pointwise confidence intervals
for(j in 1:nrow(x$est))
{ matplot(time, cbind(x$est[j,], lower[j,], upper[j,]), type="s",
xlab = xlab, ylab = ylab, xaxs="i", yaxs="i",
ylim = c(0,1), col = col[j], lwd = lwd[j], lty = c(1,3,3))
legend("topleft", legend =  rownames(x$est)[j], bty = "n", xjust = 1) }
# print pointwise confidence intervals
i <- match(ttime, time)
ci <- array(NA, c(2, length(i), nrow(lower)))
ci[1,,] <- base::t(lower[,i])
ci[2,,] <- base::t(upper[,i])
dimnames(ci) <- list(c("lower", "upper"), ttime, rownames(lower))
cat(paste("\n", level*100, "% pointwise confidence intervals:\n\n", sep=""))
print(ci, digits = digits)
out <- list(test = tests, est = x$est, se = sqrt(tfit$var), ci = ci)
}
# return results
invisible(out)
}
#Death or too sick
"CumIncidenceDeathortoosick" <- function(ftime, fstatus, group, t, strata, rho = 0,
cencode = 0, subset, na.action = na.omit, level,
xlab = "Time", ylab = "Probability",
col, lty, lwd, digits = 4)
{
# check for the required package
if(!require("cmprsk"))
{ stop("Package `cmprsk' is required and must be installed.\n
See help(install.packages) or write the following command at prompt
and then follow the instructions:\n
> install.packages(\"cmprsk\")") }
# collect data
mf  <- match.call(expand.dots = FALSE)
mf[[1]] <- as.name("list")
mf$t <- mf$digits <- mf$col <- mf$lty <- mf$lwd <- mf$level <-
mf$xlab <- mf$ylab <- NULL
mf <- eval(mf, parent.frame())
g <- max(1, length(unique(mf$group)))
s <- length(unique(mf$fstatus))
if(missing(t))
{ time <- pretty(c(0, max(mf$ftime)), 6)
ttime <- time <- time[time < max(mf$ftime)] }
else { ttime <- time <- t }
# fit model and estimates at time points
fit   <- do.call("cuminc", mf)
tfit <- timepoints(fit, time)
# print result
cat("\n+", paste(rep("-", 67), collapse=""), "+", sep ="")
cat("\n| Cumulative incidence function estimates from competing risks data |")
cat("\n+", paste(rep("-", 67), collapse=""), "+\n", sep ="")
tests <- NULL
if(g > 1)
{
tests <- data.frame(fit$Tests[,c(1,3,2)], check.names = FALSE)
colnames(tests) <- c("Statistic", "df", "p-value")
tests$`p-value` <- format.pval(tests$`p-value`)
cat("Test equality across groups:\n")
print(tests, digits = digits)
}
cat("\nEstimates at time points:\n")
print(tfit$est, digits = digits)
cat("\nStandard errors:\n")
print(sqrt(tfit$var), digits = digits)
#
if(missing(level))
{ # plot cumulative incidence functions
if(missing(t))
{ time <- sort(unique(c(ftime, time)))
x <- timepoints(fit, time) }
else x <- tfit
col <- if(missing(col)) rep(1:(s-1), rep(g,(s-1))) else col
lty <- if(missing(lty)) rep(1:g, s-1) else lty
lwd <- if(missing(lwd)) rep(1, g*(s-1)) else lwd
matplot(time, base::t(x$est)[,3:4], type="s", ylim = c(0,1),
xlab = xlab, ylab = ylab, xaxs="i", yaxs="i",
col = col, lty = lty, lwd = lwd)
legend("topleft", legend =  rownames(x$est)[3:4], x.intersp = 2,
bty = "n", xjust = 1, col = col, lty = lty, lwd = lwd)
out <- list(test = tests, est = tfit$est, se = sqrt(tfit$var))
}
else
{ if(level < 0 | level > 1)
error("level must be a value in the range [0,1]")
# compute pointwise confidence intervals
oldpar <- par(ask=TRUE)
on.exit(par(oldpar))
if(missing(t))
{ time <- sort(unique(c(ftime, time)))
x <- timepoints(fit, time) }
else x <- tfit
z <- qnorm(1-(1-level)/2)
lower <- x$est ^ exp(-z*sqrt(x$var)/(x$est*log(x$est)))
upper <- x$est ^ exp(z*sqrt(x$var)/(x$est*log(x$est)))
col <- if(missing(col)) rep(1:(s-1), rep(g,(s-1)))
else             rep(col, g*(s-1))
lwd <- if(missing(lwd)) rep(1, g*(s-1))
else             rep(lwd, g*(s-1))
# plot pointwise confidence intervals
for(j in 1:nrow(x$est))
{ matplot(time, cbind(x$est[j,], lower[j,], upper[j,]), type="s",
xlab = xlab, ylab = ylab, xaxs="i", yaxs="i",
ylim = c(0,1), col = col[j], lwd = lwd[j], lty = c(1,3,3))
legend("topleft", legend =  rownames(x$est)[j], bty = "n", xjust = 1) }
# print pointwise confidence intervals
i <- match(ttime, time)
ci <- array(NA, c(2, length(i), nrow(lower)))
ci[1,,] <- base::t(lower[,i])
ci[2,,] <- base::t(upper[,i])
dimnames(ci) <- list(c("lower", "upper"), ttime, rownames(lower))
cat(paste("\n", level*100, "% pointwise confidence intervals:\n\n", sep=""))
print(ci, digits = digits)
out <- list(test = tests, est = x$est, se = sqrt(tfit$var), ci = ci)
}
# return results
invisible(out)
}
#Transplanted
"CumIncidenceTransplanted" <- function(ftime, fstatus, group, t, strata, rho = 0,
cencode = 0, subset, na.action = na.omit, level,
xlab = "Time", ylab = "Probability",
col, lty, lwd, digits = 4)
{
# check for the required package
if(!require("cmprsk"))
{ stop("Package `cmprsk' is required and must be installed.\n
See help(install.packages) or write the following command at prompt
and then follow the instructions:\n
> install.packages(\"cmprsk\")") }
# collect data
mf  <- match.call(expand.dots = FALSE)
mf[[1]] <- as.name("list")
mf$t <- mf$digits <- mf$col <- mf$lty <- mf$lwd <- mf$level <-
mf$xlab <- mf$ylab <- NULL
mf <- eval(mf, parent.frame())
g <- max(1, length(unique(mf$group)))
s <- length(unique(mf$fstatus))
if(missing(t))
{ time <- pretty(c(0, max(mf$ftime)), 6)
ttime <- time <- time[time < max(mf$ftime)] }
else { ttime <- time <- t }
# fit model and estimates at time points
fit   <- do.call("cuminc", mf)
tfit <- timepoints(fit, time)
# print result
cat("\n+", paste(rep("-", 67), collapse=""), "+", sep ="")
cat("\n| Cumulative incidence function estimates from competing risks data |")
cat("\n+", paste(rep("-", 67), collapse=""), "+\n", sep ="")
tests <- NULL
if(g > 1)
{
tests <- data.frame(fit$Tests[,c(1,3,2)], check.names = FALSE)
colnames(tests) <- c("Statistic", "df", "p-value")
tests$`p-value` <- format.pval(tests$`p-value`)
cat("Test equality across groups:\n")
print(tests, digits = digits)
}
cat("\nEstimates at time points:\n")
print(tfit$est, digits = digits)
cat("\nStandard errors:\n")
print(sqrt(tfit$var), digits = digits)
#
if(missing(level))
{ # plot cumulative incidence functions
if(missing(t))
{ time <- sort(unique(c(ftime, time)))
x <- timepoints(fit, time) }
else x <- tfit
col <- if(missing(col)) rep(1:(s-1), rep(g,(s-1))) else col
lty <- if(missing(lty)) rep(1:g, s-1) else lty
lwd <- if(missing(lwd)) rep(1, g*(s-1)) else lwd
matplot(time, base::t(x$est)[,5:6], type="s", ylim = c(0,1),
xlab = xlab, ylab = ylab, xaxs="i", yaxs="i",
col = col, lty = lty, lwd = lwd)
legend("topleft", legend =  rownames(x$est)[5:6], x.intersp = 2,
bty = "n", xjust = 1, col = col, lty = lty, lwd = lwd)
out <- list(test = tests, est = tfit$est, se = sqrt(tfit$var))
}
else
{ if(level < 0 | level > 1)
error("level must be a value in the range [0,1]")
# compute pointwise confidence intervals
oldpar <- par(ask=TRUE)
on.exit(par(oldpar))
if(missing(t))
{ time <- sort(unique(c(ftime, time)))
x <- timepoints(fit, time) }
else x <- tfit
z <- qnorm(1-(1-level)/2)
lower <- x$est ^ exp(-z*sqrt(x$var)/(x$est*log(x$est)))
upper <- x$est ^ exp(z*sqrt(x$var)/(x$est*log(x$est)))
col <- if(missing(col)) rep(1:(s-1), rep(g,(s-1)))
else             rep(col, g*(s-1))
lwd <- if(missing(lwd)) rep(1, g*(s-1))
else             rep(lwd, g*(s-1))
# plot pointwise confidence intervals
for(j in 1:nrow(x$est))
{ matplot(time, cbind(x$est[j,], lower[j,], upper[j,]), type="s",
xlab = xlab, ylab = ylab, xaxs="i", yaxs="i",
ylim = c(0,1), col = col[j], lwd = lwd[j], lty = c(1,3,3))
legend("topleft", legend =  rownames(x$est)[j], bty = "n", xjust = 1) }
# print pointwise confidence intervals
i <- match(ttime, time)
ci <- array(NA, c(2, length(i), nrow(lower)))
ci[1,,] <- base::t(lower[,i])
ci[2,,] <- base::t(upper[,i])
dimnames(ci) <- list(c("lower", "upper"), ttime, rownames(lower))
cat(paste("\n", level*100, "% pointwise confidence intervals:\n\n", sep=""))
print(ci, digits = digits)
out <- list(test = tests, est = x$est, se = sqrt(tfit$var), ci = ci)
}
# return results
invisible(out)
}
#REMCDsummarynew
relt <- relt %>% mutate(Delist_Reason_tspl2 = case_when(
Delist_Reason_tspl2 == "Medically Unsuitable/ Death" ~ "1",
Delist_Reason_tspl2 == "Metastatic HCC" ~ "1",
Delist_Reason_tspl2 == "txp" ~ "2",
Delist_Reason_tspl2 == "Medical condition improved/ Graft recovered" ~ "3",
Delist_Reason_tspl2 == "Medical condition improved" ~ "3",
Delist_Reason_tspl2 == "Other (inadequate social supports, med non-compliance)" ~ "4",
Delist_Reason_tspl2 == "Noncompliance" ~ "4",
TRUE ~ Delist_Reason_tspl2
))
#1year dayswaitchron
relt <- relt %>% mutate(DAYSWAIT_CHRON365 = case_when(
timebetweenlisting2anddelist2 >= 366 ~ 365,
timebetweenlisting2anddelist2 <= 365 ~ timebetweenlisting2anddelist2
))
#1year dayswait status
relt <- relt %>% mutate(
REM_CD_365 = case_when(
timebetweenlisting2anddelist2 <= 365 ~ Delist_Reason_tspl2,
timebetweenlisting2anddelist2 > 365 ~ 0
)
)
#180 days dayswaitchron
relt <- relt %>% mutate(DAYSWAIT_CHRON180 = case_when(
timebetweenlisting2anddelist2 >= 181 ~ 180,
timebetweenlisting2anddelist2 >= 0 & timebetweenlisting2anddelist2 <= 180 ~ timebetweenlisting2anddelist2
))
#180 days wait
relt <- relt %>% mutate(
REM_CD_180 = case_when(
timebetweenlisting2anddelist2 <= 180 ~ Delist_Reason_tspl2,
timebetweenlisting2anddelist2 > 180 ~ 0
)
)
#90 days dayswaitchron
relt <- relt %>% mutate(DAYSWAIT_CHRON90 = case_when(
timebetweenlisting2anddelist2 >= 91 ~ 90,
timebetweenlisting2anddelist2 >= 0 & timebetweenlisting2anddelist2 <= 90 ~ timebetweenlisting2anddelist2
))
#90 days wait
relt <- relt %>% mutate(
REM_CD_90 = case_when(
timebetweenlisting2anddelist2 <= 90 ~ Delist_Reason_tspl2,
timebetweenlisting2anddelist2 > 90 ~ 0
)
)
#Datediff for 2nd listing and 2nd delisting
relt$timebetweenlisting2anddelist2 <- as.numeric(difftime(relt$DelistDate_tspl2, relt$ListingDate_tspl2, units = c("days")))
#Datediff for 2nd listing and 2nd delisting
relt$DelistDate_tspl2 <- gsub("/", "-", relt$DelistDate_tspl2)
relt$timebetweenlisting2anddelist2 <- as.numeric(difftime(relt$DelistDate_tspl2, relt$ListingDate_tspl2, units = c("days")))
#Datediff for 2nd listing and 2nd delisting
relt$DelistDate_tspl2 <- gsub("\\/", "\\-", relt$DelistDate_tspl2)
relt$timebetweenlisting2anddelist2 <- as.numeric(difftime(relt$DelistDate_tspl2, relt$ListingDate_tspl2, units = c("days")))
relt$ListingDate_tspl2 <- gsub("\\/", "\\-", relt$ListingDate_tspl2)
relt$timebetweenlisting2anddelist2 <- as.numeric(difftime(relt$DelistDate_tspl2, relt$ListingDate_tspl2, units = c("days")))
relt$DelistDate_tspl2
#Recoding dates
relt$Date_last_follow_up <- dmy(relt$Date_last_follow_up)
relt$ListingDate_tspl1 <- dmy(relt$ListingDate_tspl1)
relt$ListingDate_tspl2 <- dmy(relt$ListingDate_tspl2)
relt$DelistDate_tspl1 <- dmy(relt$DelistDate_tspl1)
#Recoding dates
relt$Date_last_follow_up <- dmy(relt$Date_last_follow_up)
relt$ListingDate_tspl1 <- dmy(relt$ListingDate_tspl1)
relt$ListingDate_tspl2 <- dmy(relt$ListingDate_tspl2)
relt$DelistDate_tspl1 <- dmy(relt$DelistDate_tspl1)
relt$DelistDate_tspl2 <- dmy(relt$DelistDate_tspl2)
relt$timebetweenlisting2anddelist2 <- as.numeric(difftime(relt$DelistDate_tspl2, relt$ListingDate_tspl2, units = c("days")))
relt$timebetweenlisting2anddelist2
rm(list=ls())
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, fig.width = 10, fig.height = 12, results="asis")
# Chunk 2: Libarary
library(ggplot2)
library(survminer)
library(survival)
library(dplyr)
library(tidyverse)
library(forestmodel)
library(sjPlot)
library(stargazer)
library(sjmisc)
library(arsenal)
library(gtsummary)
library(expss)
library(lubridate)
library(ggsignif)
library(ggsci)
library(Greg) #to use timesplitter
library(magrittr)
options(scipen=999)
# Chunk 3: Read in data
relt <- read_csv("/Users/Ivanics/Desktop/Research/59. Re-transplants/Updated from Luckshi/LD vs DD LT Mar 22.csv", guess_max = 300000)
relt <- relt %>% mutate(across(where(is.character), ~na_if(., ".")), across(where(is.character), ~na_if(., "-")))
# Chunk 4
#To do
#Do waitlist analysis competing risk
# Chunk 5: Coding variables
relt <- relt %>% mutate(
LDLT = case_when(
TYPE_tspl1 == "LDLT" ~ 1,
TRUE ~ 0
)) %>%
mutate(DON_SEX_tspl1 = factor(DON_SEX_tspl1, labels = c("Female", "Male"))) %>%
mutate(DON_SEX_tspl2 = factor(DON_SEX_tspl2, labels = c("Female", "Male"))) %>%
mutate(RSEX = factor(`SEX (1=male,0=female)`, labels = c("Female", "Male"))) %>%
mutate(BLOOD_GROUP = factor(`BLOOD_GROUP (A, B, AB, O)`)) %>%
mutate(RETH = factor(`ETHNICITY (white/ caucasian=1, AA=2, Hispanic=3, Asian=4, Other=5)`, labels = c("White", "Black", "Asian", "Other"))) %>%
mutate(EtiologyOfLiverDisease = factor(`EtiologyOfLiverDisease (HCV=1, HBV=2, Crypto=3, ALD=4, PSC/PBC/AIH=5, NASH=6, Other=7)`, labels = c("HCV", "HBV", "Cryptogenic", "ALD", "PSC, PBC, AIH", "NASH", "Other"))) %>%
mutate(HCC = factor(`HCC (Y=1, N=0)`)) %>%
mutate(EX_LIST = factor(`EX_LIST_tspl1 (Y=1, N=0)`)) %>%
mutate(EX_SMC_tspl1 = factor(`EX_SMC_tspl1 (Y=1, N=0)`)) %>%
mutate(EX_SMC_tspl2 = factor(`EX_SMC_tspl2 (Y=1, N=0)`)) %>%
mutate(Ducttoduct_tspl1 = factor(`Ducttoduct_tspl1 (Y=1, N=0)`)) %>%
mutate(LD1_RELATED1yes0no = factor(`LD_RELATED_tspl1 (yes= 1, no=0)`)) %>%
mutate(Number_HA_tspl1 = factor(Number_HA_tspl1)) %>%
mutate(Number_Bile_duct_tspl1 = factor(Number_Bile_duct_tspl1)) %>%
mutate(piggyback_tspl1 = factor(piggyback_tspl1)) %>%
mutate(GRAFTTYPE_tspl1 = factor(`GraftType_tspl1 (Right=1, Left=2, Other=3)`)) %>%
mutate(Bile_leak_tspl1 = factor(Bile_leak_tspl1)) %>%
mutate(Any_biliary_complication_tspl1 = factor(Any_biliary_complication_tspl1)) %>%
mutate(HAT_tspl1 = factor(`HAT_tspl1 (Y=1, N=0)`)) %>%
mutate(Biliary_stricture_tspl1 = factor(Biliary_stricture_tspl1)) %>%
mutate(TYPE_tspl1 = factor(TYPE_tspl1)) %>%
mutate(Number_unplannedabdominaloperations_post_tspl1 = factor(Number_unplannedabdominaloperations_post_tspl1)) %>%
mutate(Graft_failure_reason_tspl1 = factor(Graft_failure_reason_tspl1)) %>%
mutate(Graft_failure_6categor_tspl1 = factor(Graft_failure_6categor_tspl1, labels = c("Biliary complications", "Rejection (acute or chronic)", "Hepatic artery thrombosis or portal vein thrombosis", "Graft nonfunction", "Disease recurrence", "Other"))) %>%
mutate(Graft_failure_7categor_tspl1 = factor(Graft_failure_7categor_tspl1, labels = c("Biliary complications", "Rejection (acute or chronic)", "Early hepatic artery thrombosis or portal vein thrombosis (<30 days)", "Late hepatic artery thrombosis or portal vein thrombosis (>30 days)", "Graft nonfunction", "Disease recurrence", "Other"))) %>%
mutate(Graft_failure_tspl1_clean = factor(Graft_failure_tspl1_clean)) %>%
mutate(Rejection_tspl1 = factor(`Rejection_tspl1 (Y=1, N=0)`)) %>%
mutate(EARLY_HAT_graft_failure_tspl1 = factor(EARLY_HAT_graft_failure_tspl1)) %>%
mutate(LATE_HAT_graft_failure_tspl1 = factor(LATE_HAT_graft_failure_tspl1)) %>%
mutate(Dialysis_post_tspl1 = factor(`Dialysis_post_tspl1 (Y=1, N=0)`)) %>%
mutate(ARF_post_tspl1 = factor(`ARF_post_tspl1 (Y=1, N=0)`)) %>%
mutate(Biliary_graft_failure_tspl1 = factor(Biliary_graft_failure_tspl1)) %>%   mutate(PVT_tspl1 = factor(`PVT_tspl1 (Y=1, N=0)`)) %>%
mutate(Recurrent_Hepatitis_tspl1 = factor(Recurrent_Hepatitis_tspl1)) %>%
mutate(TYPE_tspl2 = factor(TYPE_tspl2)) %>%
mutate(Ducttoduct_tspl2 = factor(`Ducttoduct_tspl2 (Y=1, N=0)`)) %>%
mutate(Number_Bile_duct_tspl2 = factor(Number_Bile_duct_tspl2)) %>%
mutate(Number_HA_tspl2 = factor(Number_HA_tspl2)) %>%
mutate(piggyback_tspl2 = factor(piggyback_tspl2)) %>%
mutate(Bile_leak_tspl2 = factor(Bile_leak_tspl2)) %>%
mutate(ARF_tspl2 = factor(`ARF_post_tspl1 (Y=1, N=0)`)) %>%
mutate(HAT_tspl2 = factor(`HAT_tspl2 (Y=1, N=0)`)) %>%
mutate(Biliary_stricture_tspl2 = factor(Biliary_stricture_tspl2)) %>%
mutate(Graft_failure_tspl2_clean = factor(Graft_failure_tspl2_clean)) %>%
mutate(Number_unplannedabdominaloperations_post_tspl2 = factor(Number_unplannedabdominaloperations_post_tspl2)) %>%
mutate(Rejection_tspl2 = factor(`Rejection_tspl2 (Y=1, N=0)`)) %>%
mutate(Dialysis_post_tspl2 = factor(`Dialysis_post_tspl2 (Y=1, N=0)`)) %>%
mutate(PVT_tspl2 = factor(`PVT_tspl2 (Y=1, N=0)`)) %>%
mutate(Recurrent_Hepatitis_tspl2 = factor(Recurrent_Hepatitis_tspl2))
relt$CIT_tspl1 <- as.numeric(relt$CIT_tspl1)
relt$CIT_tspl2 <- as.numeric(relt$CIT_tspl2)
relt$CIT_tspl3 <- as.numeric(relt$CIT_tspl3)
relt$WIT_tspl1 <- as.numeric(relt$WIT_tspl1)
relt$WIT_tspl2 <- as.numeric(relt$WIT_tspl2)
relt$WIT_tspl3 <- as.numeric(relt$WIT_tspl3)
relt$Wait_tspl1 <- as.numeric(relt$Wait_tspl1)
relt$Wait_tspl2 <- as.numeric(relt$Wait_tspl2)
relt$MELD_tspl1<- as.numeric(relt$MELD_tspl1)
relt$MELD_tspl2<- as.numeric(relt$MELD_tspl2)
relt$MELD_tspl3<- as.numeric(relt$MELD_tspl3)
#relt <- relt %>%
#  mutate(PSURV_years = PSURV/365.25) %>%
#  mutate(GSURV_years = GSURV/365.25)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, fig.width = 10, fig.height = 12, results="asis")
# Chunk 2: Libarary
library(ggplot2)
library(survminer)
library(survival)
library(dplyr)
library(tidyverse)
library(forestmodel)
library(sjPlot)
library(stargazer)
library(sjmisc)
library(arsenal)
library(gtsummary)
library(expss)
library(lubridate)
library(ggsignif)
library(ggsci)
library(Greg) #to use timesplitter
library(magrittr)
options(scipen=999)
# Chunk 3: Read in data
relt <- read_csv("/Users/Ivanics/Desktop/Research/59. Re-transplants/Updated from Luckshi/LD vs DD LT Mar 22.csv", guess_max = 300000)
relt <- relt %>% mutate(across(where(is.character), ~na_if(., ".")), across(where(is.character), ~na_if(., "-")))
# Chunk 4
#To do
#Do waitlist analysis competing risk
# Chunk 5: Coding variables
relt <- relt %>% mutate(
LDLT = case_when(
TYPE_tspl1 == "LDLT" ~ 1,
TRUE ~ 0
)) %>%
mutate(DON_SEX_tspl1 = factor(DON_SEX_tspl1, labels = c("Female", "Male"))) %>%
mutate(DON_SEX_tspl2 = factor(DON_SEX_tspl2, labels = c("Female", "Male"))) %>%
mutate(RSEX = factor(`SEX (1=male,0=female)`, labels = c("Female", "Male"))) %>%
mutate(BLOOD_GROUP = factor(`BLOOD_GROUP (A, B, AB, O)`)) %>%
mutate(RETH = factor(`ETHNICITY (white/ caucasian=1, AA=2, Hispanic=3, Asian=4, Other=5)`, labels = c("White", "Black", "Asian", "Other"))) %>%
mutate(EtiologyOfLiverDisease = factor(`EtiologyOfLiverDisease (HCV=1, HBV=2, Crypto=3, ALD=4, PSC/PBC/AIH=5, NASH=6, Other=7)`, labels = c("HCV", "HBV", "Cryptogenic", "ALD", "PSC, PBC, AIH", "NASH", "Other"))) %>%
mutate(HCC = factor(`HCC (Y=1, N=0)`)) %>%
mutate(EX_LIST = factor(`EX_LIST_tspl1 (Y=1, N=0)`)) %>%
mutate(EX_SMC_tspl1 = factor(`EX_SMC_tspl1 (Y=1, N=0)`)) %>%
mutate(EX_SMC_tspl2 = factor(`EX_SMC_tspl2 (Y=1, N=0)`)) %>%
mutate(Ducttoduct_tspl1 = factor(`Ducttoduct_tspl1 (Y=1, N=0)`)) %>%
mutate(LD1_RELATED1yes0no = factor(`LD_RELATED_tspl1 (yes= 1, no=0)`)) %>%
mutate(Number_HA_tspl1 = factor(Number_HA_tspl1)) %>%
mutate(Number_Bile_duct_tspl1 = factor(Number_Bile_duct_tspl1)) %>%
mutate(piggyback_tspl1 = factor(piggyback_tspl1)) %>%
mutate(GRAFTTYPE_tspl1 = factor(`GraftType_tspl1 (Right=1, Left=2, Other=3)`)) %>%
mutate(Bile_leak_tspl1 = factor(Bile_leak_tspl1)) %>%
mutate(Any_biliary_complication_tspl1 = factor(Any_biliary_complication_tspl1)) %>%
mutate(HAT_tspl1 = factor(`HAT_tspl1 (Y=1, N=0)`)) %>%
mutate(Biliary_stricture_tspl1 = factor(Biliary_stricture_tspl1)) %>%
mutate(TYPE_tspl1 = factor(TYPE_tspl1)) %>%
mutate(Number_unplannedabdominaloperations_post_tspl1 = factor(Number_unplannedabdominaloperations_post_tspl1)) %>%
mutate(Graft_failure_reason_tspl1 = factor(Graft_failure_reason_tspl1)) %>%
mutate(Graft_failure_6categor_tspl1 = factor(Graft_failure_6categor_tspl1, labels = c("Biliary complications", "Rejection (acute or chronic)", "Hepatic artery thrombosis or portal vein thrombosis", "Graft nonfunction", "Disease recurrence", "Other"))) %>%
mutate(Graft_failure_7categor_tspl1 = factor(Graft_failure_7categor_tspl1, labels = c("Biliary complications", "Rejection (acute or chronic)", "Early hepatic artery thrombosis or portal vein thrombosis (<30 days)", "Late hepatic artery thrombosis or portal vein thrombosis (>30 days)", "Graft nonfunction", "Disease recurrence", "Other"))) %>%
mutate(Graft_failure_tspl1_clean = factor(Graft_failure_tspl1_clean)) %>%
mutate(Rejection_tspl1 = factor(`Rejection_tspl1 (Y=1, N=0)`)) %>%
mutate(EARLY_HAT_graft_failure_tspl1 = factor(EARLY_HAT_graft_failure_tspl1)) %>%
mutate(LATE_HAT_graft_failure_tspl1 = factor(LATE_HAT_graft_failure_tspl1)) %>%
mutate(Dialysis_post_tspl1 = factor(`Dialysis_post_tspl1 (Y=1, N=0)`)) %>%
mutate(ARF_post_tspl1 = factor(`ARF_post_tspl1 (Y=1, N=0)`)) %>%
mutate(Biliary_graft_failure_tspl1 = factor(Biliary_graft_failure_tspl1)) %>%   mutate(PVT_tspl1 = factor(`PVT_tspl1 (Y=1, N=0)`)) %>%
mutate(Recurrent_Hepatitis_tspl1 = factor(Recurrent_Hepatitis_tspl1)) %>%
mutate(TYPE_tspl2 = factor(TYPE_tspl2)) %>%
mutate(Ducttoduct_tspl2 = factor(`Ducttoduct_tspl2 (Y=1, N=0)`)) %>%
mutate(Number_Bile_duct_tspl2 = factor(Number_Bile_duct_tspl2)) %>%
mutate(Number_HA_tspl2 = factor(Number_HA_tspl2)) %>%
mutate(piggyback_tspl2 = factor(piggyback_tspl2)) %>%
mutate(Bile_leak_tspl2 = factor(Bile_leak_tspl2)) %>%
mutate(ARF_tspl2 = factor(`ARF_post_tspl1 (Y=1, N=0)`)) %>%
mutate(HAT_tspl2 = factor(`HAT_tspl2 (Y=1, N=0)`)) %>%
mutate(Biliary_stricture_tspl2 = factor(Biliary_stricture_tspl2)) %>%
mutate(Graft_failure_tspl2_clean = factor(Graft_failure_tspl2_clean)) %>%
mutate(Number_unplannedabdominaloperations_post_tspl2 = factor(Number_unplannedabdominaloperations_post_tspl2)) %>%
mutate(Rejection_tspl2 = factor(`Rejection_tspl2 (Y=1, N=0)`)) %>%
mutate(Dialysis_post_tspl2 = factor(`Dialysis_post_tspl2 (Y=1, N=0)`)) %>%
mutate(PVT_tspl2 = factor(`PVT_tspl2 (Y=1, N=0)`)) %>%
mutate(Recurrent_Hepatitis_tspl2 = factor(Recurrent_Hepatitis_tspl2))
relt$CIT_tspl1 <- as.numeric(relt$CIT_tspl1)
relt$CIT_tspl2 <- as.numeric(relt$CIT_tspl2)
relt$CIT_tspl3 <- as.numeric(relt$CIT_tspl3)
relt$WIT_tspl1 <- as.numeric(relt$WIT_tspl1)
relt$WIT_tspl2 <- as.numeric(relt$WIT_tspl2)
relt$WIT_tspl3 <- as.numeric(relt$WIT_tspl3)
relt$Wait_tspl1 <- as.numeric(relt$Wait_tspl1)
relt$Wait_tspl2 <- as.numeric(relt$Wait_tspl2)
relt$MELD_tspl1<- as.numeric(relt$MELD_tspl1)
relt$MELD_tspl2<- as.numeric(relt$MELD_tspl2)
relt$MELD_tspl3<- as.numeric(relt$MELD_tspl3)
#relt <- relt %>%
#  mutate(PSURV_years = PSURV/365.25) %>%
#  mutate(GSURV_years = GSURV/365.25)
relt$status <- as.numeric(relt$status)
relt <- relt %>% filter(status %in% c(1, 0))
relt <- relt %>% filter(`OSH_tspl1 (Y=1, N=0)` == 0)
relt <- relt %>% filter(status %in% c(1, 0))
relt <- relt %>% filter(`OSH_tspl1 (Y=1, N=0)` == 0)
#Recoding dates
relt$Date_last_follow_up <- dmy(relt$Date_last_follow_up)
relt$ListingDate_tspl1 <- dmy(relt$ListingDate_tspl1)
relt$ListingDate_tspl2 <- dmy(relt$ListingDate_tspl2)
